# Day One

```elixir
Mix.install([
  {:kino, "~> 0.11.3"}
])
```

## Utilities

```elixir
defmodule Utilities do
  @moduledoc """
  Provides utility functions to be used across days
  """

  def read_data(day) do
    day_as_string =
      day
      |> Integer.to_string()
      |> String.pad_leading(2, "0")

    Path.join(__DIR__, "../data/day_#{day_as_string}_input.txt")
    |> Path.expand()
    |> File.read!()
  end

  def to_list(big_string) do
    String.split(big_string, "\n")
  end
end
```

## Day 1: Trebuchet?!

Something is wrong with global snow production, and you've been selected to take a look. The Elves have even given you a map; on it, they've used stars to mark the top fifty locations that are likely to be having problems.

You've been doing this long enough to know that to restore snow operations, you need to check all fifty stars by December 25th.

Collect stars by solving puzzles. Two puzzles will be made available on each day in the Advent calendar; the second puzzle is unlocked when you complete the first. Each puzzle grants one star. Good luck!

You try to ask why they can't just use a weather machine ("not powerful enough") and where they're even sending you ("the sky") and why your map looks mostly blank ("you sure ask a lot of questions") and hang on did you just say the sky ("of course, where do you think snow comes from") when you realize that the Elves are already loading you into a trebuchet ("please hold still, we need to strap you in").

As they're making the final adjustments, they discover that their calibration document (your puzzle input) has been amended by a very young Elf who was apparently just excited to show off her art skills. Consequently, the Elves are having trouble reading the values on the document.

The newly-improved calibration document consists of lines of text; each line originally contained a specific calibration value that the Elves now need to recover. On each line, the calibration value can be found by combining the first digit and the last digit (in that order) to form a single two-digit number.

For example:

```
1abc2
pqr3stu8vwx
a1b2c3d4e5f
treb7uchet
```

In this example, the calibration values of these four lines are 12, 38, 15, and 77. Adding these together produces 142.

Consider your entire calibration document. What is the sum of all of the calibration values?

--- Part Two ---
Your calculation isn't quite right. It looks like some of the digits are actually spelled out with letters: one, two, three, four, five, six, seven, eight, and nine also count as valid "digits".

Equipped with this new information, you now need to find the real first and last digit on each line. For example:

```
two1nine
eightwothree
abcone2threexyz
xtwone3four
4nineeightseven2
zoneight234
7pqrstsixteen
```

In this example, the calibration values are 29, 83, 13, 24, 42, 14, and 76. Adding these together produces 281.

What is the sum of all of the calibration values?

```elixir
practice_input = [
  "1abc2",
  "pqr3stu8vwx",
  "a1b2c3d4e5f",
  "treb7uchet"
]

practice_input_two = [
  "two1nine",
  "eightwothree",
  "abcone2threexyz",
  "xtwone3four",
  "4nineeightseven2",
  "zoneight234",
  "7pqrstsixteen"
]

puzzle_input = Utilities.read_data(1) |> Utilities.to_list()
```

take each string

turn into enum

get the first thing that can be turned into number

reverse it

get the first thing that can be turned into number

turn them, add them

part two

for each charlist:

* look at each slice, starting at the first letter
* if the slice contains a number, return
* if the slice equals a written number, return,
* restart, and add the next to the slice

```elixir
defmodule DayOne do
  # we are rolling with charlists. These are the codepoints for 0-9
  @numbers [48, 49, 50, 51, 52, 53, 54, 55, 56, 57]

  def find_and_return_number(char_list) do
    Enum.find(char_list, fn char ->
      char in @numbers
    end)
  end

  def replace_all_numbers(line) do
    line
    |> String.replace("one", "o1e")
    |> String.replace("two", "t2o")
    |> String.replace("three", "t3e")
    |> String.replace("four", "f4r")
    |> String.replace("five", "f5e")
    |> String.replace("six", "s6x")
    |> String.replace("seven", "s7n")
    |> String.replace("eight", "e8t")
    |> String.replace("nine", "n9e")
  end

  def part_one(puzzle_input) do
    Enum.reduce(puzzle_input, 0, fn line, acc ->
      char_list = String.to_charlist(line)

      first_number = DayOne.find_and_return_number(char_list)
      second_number = DayOne.find_and_return_number(Enum.reverse(char_list))

      line_total =
        [first_number, second_number]
        |> List.to_integer()

      acc + line_total
    end)
  end

  def part_two(puzzle_input) do
    Enum.reduce(puzzle_input, 0, fn line, acc ->
      char_list =
        replace_all_numbers(line)
        |> String.to_charlist()
        |> IO.inspect()

      first_number = DayOne.find_and_return_number(char_list)
      second_number = DayOne.find_and_return_number(Enum.reverse(char_list))

      line_total =
        [first_number, second_number]
        |> List.to_integer()

      acc + line_total
    end)
  end
end
```

```elixir
DayOne.part_two(puzzle_input)
```

I need to replacde the work representations of the numbers with the numbers FIRST

<!-- livebook:{"offset":5289,"stamp":{"token":"XCP.kPW9Yl0YgNOosA154UqnCZahMMjYCNMQ4rN_aBwpY_WtJSZFC6tJ-mOuiMPOgm46m_yCEohK5YDlnUeiAcNRA3njBNtv-0WGyU1uuut3UbH1VKm2FYaO8Dww","version":2}} -->
